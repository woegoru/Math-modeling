#–ö–æ–±—è—à–æ–≤–∞ –î–∞—Ä—å—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ 3 –∫—É—Ä—Å 4 –≥—Ä—É–ø–ø–∞

#–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–¥–∞–Ω–Ω–æ–π –≤ n —Ç–æ—á–∫–∞—Ö:
#—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É—Å–æ—á–Ω–æ-–ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
#–ü—Ä–∏ –∫—É—Å–æ—á–Ω–æ-–ø–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–æ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–∏–Ω–æ–º —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [ùë•ùëñ‚àí1, ùë•ùëñ, ùë•ùëñ+1] –ø–æ 3-–º —É–∑–ª–æ–≤—ã–º —Ç–æ—á–∫–∞–º, 
#–±–ª–∏–∂–∞–π—à–∏–º –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

import matplotlib.pyplot as plt 
import numpy as np
from generanor import *

def data_read(path: str): #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    f = open(path, 'r')
    l = f.readline() #—á—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    data = list()
    while(l):
        x = [float(num) for num in l.split('\n')[0].split(', ')] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –¥–ª—è —Ö
        l = f.readline() #—á—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
        y = [float(num) for num in l.split('\n')[0].split(', ')] #–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –¥–ª—è —É
        data.append([x, y])
        l = f.readline() #—á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏-—Ä–∞–∑–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è
        l = f.readline() #—á—Ç–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π(–Ω–æ–≤–æ–π –ø–µ—Ä–≤–æ–π) —Å—Ç—Ä–æ–∫–∏
    return data

def interpol(data, x_found):
        for i in range(len(data)):
            y_interpol = None
            for j in range(1, len(data[i][0])-1, 2): #–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞–±–æ—Ä—É
                x = np.linspace(data[i][0][j - 1], data[i][0][j + 1]) #–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                matrix_coef = np.array([
                            [(data[i][0][j - 1])**2, data[i][0][j - 1], 1.],
                            [(data[i][0][j])**2, data[i][0][j], 1.],
                            [(data[i][0][j + 1])**2, data[i][0][j + 1], 1.]
                            ]) #–º–∞—Ç—Ä–∏—Ü–∞ (–ª–µ–≤–∞—è —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã)
                free_member = np.array([data[i][1][j - 1], data[i][1][j], data[i][1][j + 1]]) #—Å–≤–æ–±–æ–¥–Ω—ã–µ —á–ª–µ–Ω—ã (–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã)
                decision = np.linalg.solve(matrix_coef, free_member) #—Ä–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                func = (decision[0]*x**2 + decision[1]*x + decision[2]) #–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–±–æ–ª—ã   
                if x_found < data[i][0][j + 1] and y_interpol == None and x_found >= data[i][0][0]:
                    y_interpol = decision[0]*x_found**2 + decision[1]*x_found + decision[2] #—É—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–π –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–∫–∞–æ–º–∞—è —Ç–æ—á–∫–∞
                plt.plot(x, func, c='k') #—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ—á–µ–∫ 
                plt.scatter(x_found, y_interpol, c='r', marker='*', s= 150) #–∏—Å–∫–æ–º–∞—è —Ç–æ—á–∫–∞
            plt.scatter(data[i][0], data[i][1]) #–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–±–æ—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö
        plt.show()

print('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ x –∏—Å–∫–æ–º–æ–π —Ç–æ—á–∫–∏')
x_found = float(input())

interpol(data_read('task3/task3.2.txt'), x_found)